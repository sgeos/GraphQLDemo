# query / mutation / subscription

subscription onPostAdded {
  post_added {
    title
    date
    slug
    body
  }
}

# query / mutation / subscription variables
# {
#   none
# }

# # Schema
#
# # A date. This scalar datatype is not built into GraphQL.
# scalar Date
#
# # Text stored as Markdown but returned as HTML. This scalar datatype is not built into GraphQL.
# scalar Markdown
#
# # A blog post.
# type Post {
#   # The title of the post.
#   title: String!
#   # The date of the post.
#   # It probably makes sense to have both creation and
#   # modification dates, but this is a simple example.
#   date: Date!
#   # The post body stored as Markdown. This field is returned as HTML.
#   body: Markdown!
#   # The blog post slug.
#   # The slug is created automatically from the title.
#   # The slug could be a computed value, but that would incur a
#   # performance penalty every time the field is accessed.
#   # Additionally, a non-computed slug can be changed if there
#   # is a reason for one that does not completely match the title.
#   slug: String!
# }
#
# # The blog post input object.
# input PostInput {
#   # The title of the post.
#   # The slug is created automatically from the title.
#   title: String!
#   # The date of the post.
#   # It probably makes sense to have both creation and
#   # modification dates, but this is a simple example.
#   date: Date!
#   # The post body stored as Markdown. This field is returned as HTML.
#   body: Markdown!
# }
#
# # These are the mutations available on this server.
# type Mutation {
#   # Create a blog post.
#   create_post(post: PostInput): Post
# }
#
# # These are the queries available on this server.
# type Query {
#   # Get all blog posts.
#   all_posts(): [Post]
#   # Get a single blog post by slug.
#   get_post(slug: String): Post
# }
#
# # These are the subscriptions available on this server.
# type Subscription {
#   # Get new posts when they are created.
#   post_added(): Post
#   # Get updated posts when they are modified.
#   post_updated(): Post
#   # Get deleted posts when they are removed.
#   post_deleted(): Post
# }

# query / mutation / subscription result
{
  "data": {
    "post_added": {
      "title": "GraphQL 101",
      "slug": "graphql-101",
      "date": "2015-05-21T00:00:00.000Z",
      "body": "<h1>All about GraphQL</h1>\n"
    }
  }
}

